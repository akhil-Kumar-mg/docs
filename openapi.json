{
  "openapi": "3.0.0",
  "info": {
    "title": "Eximpe Payment Gateway API",
    "description": "API for payment processing and order management through Eximpe payment gateway",
    "license": {
      "name": "Proprietary"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.eximpe.com",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "clientAuth": [],
      "clientSecretAuth": [],
      "merchantAuth": []
    }
  ],
  "paths": {
    "/pg/orders": {
      "post": {
        "summary": "Create Order",
        "description": "Create a new order for payment processing.",
        "tags": ["Orders"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": [],
            "merchantAuth": []
          }
        ],
        "requestBody": {
          "description": "Order creation request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              },
              "example": {
                "amount": "1000.00",
                "currency": "INR",
                "reference_id": "TEST_41IBS0",
                "return_url": "http://localhost:8000/sample-integration/checkout/callback/",
                "mop_type": "UPI",
                "buyer": {
                  "name": "John Doe",
                  "email": "john.doe@example.com",
                  "phone": "+919876543210",
                  "address": {
                    "line_1": "123 Main Street",
                    "line_2": "Apt 4B",
                    "city": "Mumbai",
                    "state": "Maharashtra",
                    "postal_code": "400001"
                  }
                },
                "product": {
                  "name": "Premium Laptop",
                  "description": "High-performance laptop with latest specifications",
                  "hs_code": "84713000",
                  "hs_code_description": "Portable automatic data processing machines",
                  "type_of_goods": "goods"
                },
                "invoice": {
                  "number": "INV_2TIO9F",
                  "date": "2024-01-15"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateOrderResponse"
                },
                "example": {
                  "success": true,
                  "message": "Order created successfully",
                  "data": {
                    "session_id": "session_abc123def456",
                    "order_id": "order_xyz789uvw012"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Invalid request parameters",
                  "error": {
                    "code": "ERR_ORDER_002",
                    "message": "Required field 'amount' is missing",
                    "details": {
                      "field": "amount",
                      "reason": "Field is required but not provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/orders/{order_id}": {
      "patch": {
        "summary": "Update Order",
        "description": "Update specific fields of an existing order.",
        "tags": ["Orders"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "OD3451762252"
          }
        ],
        "requestBody": {
          "description": "Order update request - only include fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderRequest"
              },
              "example": {
                "buyer": {
                  "pan_number": "BNYPG9212K",
                  "dob": "2010-01-23"
                },
                "invoice": {
                  "number": "INV_2TIO9F",
                  "date": "2025-06-22"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrderResponse"
                },
                "example": {
                  "success": true,
                  "message": "Order updated successfully",
                  "data": {
                    "success": true,
                    "message": "Order update processed successfully",
                    "data": {
                      "order_id": "OD3451762252",
                      "buyer": {
                        "pan_number": "BNYPG9212K",
                        "dob": "2010-01-23"
                      },
                      "invoice": {
                        "number": "INV_2TIO9F",
                        "date": "2025-06-22"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Order not found",
                  "error": {
                    "code": "ERR_ORDER_404",
                    "message": "Order with ID 'OD3451762252' not found"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get Order",
        "description": "Retrieve order details by order ID.",
        "tags": ["Orders"],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "OD3451762252"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOrderResponse"
                },
                "example": {
                  "success": true,
                  "message": "Order fetched successfully",
                  "data": {
                    "order_id": "OD3451762252",
                    "reference_id": "TEST_41IBS11",
                    "amount": 1000.0,
                    "currency": "INR",
                    "mop_type": "UPI",
                    "buyer": {
                      "name": "John Doe",
                      "email": "john.doe@example.com",
                      "phone": "+919876543210",
                      "address": {
                        "line_1": "123 Main Street",
                        "line_2": "Apt 4B",
                        "city": "City",
                        "state": "State",
                        "postal_code": "123456"
                      },
                      "pan_number": null,
                      "dob": null
                    },
                    "product": {
                      "name": "Sample Product",
                      "description": "This is a sample product description",
                      "hs_code": "98051000",
                      "hs_code_description": "Portable automatic data processing machines",
                      "type_of_goods": "goods"
                    },
                    "invoice": {
                      "number": "INV_2TIO9F",
                      "date": "2025-06-22",
                      "file": null
                    },
                    "air_waybills": [],
                    "payment_requests": [],
                    "status": "payment_pending",
                    "status_message": null,
                    "created_at": "2025-06-22T20:43:05.466363Z",
                    "is_testing": true
                  }
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "success": false,
                  "message": "Order not found",
                  "error": {
                    "code": "ERR_ORDER_404",
                    "message": "Order with ID 'OD3451762252' not found"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pg/orders/{order_id}/documents/": {
      "post": {
        "summary": "Upload Document",
        "description": "Upload an invoice or other document for an existing order.",
        "tags": [
          "Orders"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "description": "Unique identifier of the order",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "OD3451762252"
          }
        ],
        "requestBody": {
          "description": "Document upload request. The body must be `multipart/form-data`.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadDocumentRequest"
              },
              "examples": {
                "invoiceUpload": {
                  "summary": "Invoice Upload Example",
                  "value": {
                    "identifier": "IN1123213",
                    "document_type": "invoice",
                    "file": "your-invoice.pdf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadDocumentResponse"
                },
                "example": {
                  "success": true,
                  "message": "Document uploaded successfully",
                  "data": {
                    "order_id": "OD3451762252",
                    "document_id": "doc_12345",
                    "document_type": "invoice",
                    "file_url": "https://your-storage.s3.amazonaws.com/doc_12345.pdf"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merchant/payments/": {
      "get": {
        "summary": "List Payments",
        "description": "Retrieve a list of payments with optional filtering.",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "description": "Filter by 3-letter ISO currency code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchant",
            "in": "query",
            "description": "Filter by merchant ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_id",
            "in": "query",
            "description": "Filter by payment ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reference_id",
            "in": "query",
            "description": "Filter by order reference ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "buyer_name",
            "in": "query",
            "description": "Filter by buyer's name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "payment_mode",
            "in": "query",
            "description": "Filter by payment mode.",
            "schema": {
              "type": "string",
              "enum": [
                "UPI",
                "CARD",
                "NETBANKING",
                "WALLET"
              ]
            }
          },
          {
            "name": "collection_mode",
            "in": "query",
            "description": "Filter by collection mode.",
            "schema": {
              "type": "string",
              "enum": [
                "HOSTED",
                "API"
              ]
            }
          },
          {
            "name": "txn_type",
            "in": "query",
            "description": "Filter by transaction type.",
            "schema": {
              "type": "string",
              "enum": [
                "SALE",
                "REFUND"
              ]
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by payment status.",
            "schema": {
              "type": "string",
              "enum": [
                "PAYMENT_PENDING",
                "PAYMENT_SUCCESSFUL",
                "PAYMENT_FAILED"
              ]
            }
          },
          {
            "name": "payment_gateway",
            "in": "query",
            "description": "Filter by payment gateway.",
            "schema": {
              "type": "string",
              "enum": [
                "STRIPE",
                "RAZORPAY",
                "CASHFREE"
              ]
            }
          },
          {
            "name": "from_created_date",
            "in": "query",
            "description": "Filter by creation date (from).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_created_date",
            "in": "query",
            "description": "Filter by creation date (to).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "from_payment_completed_date",
            "in": "query",
            "description": "Filter by payment completion date (from).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "to_payment_completed_date",
            "in": "query",
            "description": "Filter by payment completion date (to).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of payments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPaymentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merchant/payments/{payment_id}/": {
      "get": {
        "summary": "Get Payment",
        "description": "Retrieve the details of a specific payment by its ID.",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "clientAuth": [],
            "clientSecretAuth": []
          }
        ],
        "parameters": [
          {
            "name": "payment_id",
            "in": "path",
            "description": "The ID of the payment to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the payment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateOrderRequest": {
        "type": "object",
        "required": ["amount", "currency", "reference_id", "buyer", "product"],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount in decimal format (e.g., \"100.00\")",
            "pattern": "^\\d+\\.\\d{2}$"
          },
          "currency": {
            "type": "string",
            "description": "3-letter ISO currency code (e.g., INR, USD)",
            "pattern": "^[A-Z]{3}$"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique identifier for the order"
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect after payment"
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment type (e.g., UPI)",
            "enum": ["UPI", "CARD", "NETBANKING", "WALLET"]
          },
          "buyer": {
            "$ref": "#/components/schemas/Buyer"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          }
        }
      },
      "Buyer": {
        "type": "object",
        "required": ["name", "address"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Buyer's full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Buyer's email address"
          },
          "phone": {
            "type": "string",
            "description": "Buyer's phone number with country code",
            "pattern": "^\\+[1-9]\\d{1,14}$"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "Address": {
        "type": "object",
        "required": ["line_1", "city", "state", "postal_code"],
        "properties": {
          "line_1": {
            "type": "string",
            "description": "Address line 1"
          },
          "line_2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "state": {
            "type": "string",
            "description": "State name"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal/ZIP code"
          }
        }
      },
      "Product": {
        "type": "object",
        "required": ["name", "type_of_goods"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "description": {
            "type": "string",
            "description": "Product description"
          },
          "hs_code": {
            "type": "string",
            "description": "Harmonized System code"
          },
          "hs_code_description": {
            "type": "string",
            "description": "Description of the HS code"
          },
          "type_of_goods": {
            "type": "string",
            "description": "Type of goods (e.g., goods)",
            "enum": ["goods", "services"]
          }
        }
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Invoice number"
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Invoice date in YYYY-MM-DD format"
          }
        }
      },
      "CreateOrderResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/OrderData"
          }
        }
      },
      "OrderData": {
        "type": "object",
        "required": ["session_id", "order_id"],
        "properties": {
          "session_id": {
            "type": "string",
            "description": "Unique session identifier for payment processing"
          },
          "order_id": {
            "type": "string",
            "description": "Unique order identifier"
          }
        }
      },
      "OrderDetails": {
        "type": "object",
        "required": ["order_id", "reference_id", "amount", "currency", "status", "created_at"],
        "properties": {
          "order_id": {
            "type": "string",
            "description": "Unique order identifier"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique reference identifier for the order"
          },
          "amount": {
            "type": "number",
            "description": "Order amount"
          },
          "currency": {
            "type": "string",
            "description": "3-letter ISO currency code"
          },
          "mop_type": {
            "type": "string",
            "description": "Method of payment type",
            "enum": ["UPI", "CARD", "NETBANKING", "WALLET"]
          },
          "buyer": {
            "type": "object",
            "required": ["name", "address"],
            "properties": {
              "name": {
                "type": "string",
                "description": "Buyer's full name"
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Buyer's email address"
              },
              "phone": {
                "type": "string",
                "description": "Buyer's phone number with country code"
              },
              "address": {
                "$ref": "#/components/schemas/Address"
              },
              "pan_number": {
                "type": "string",
                "nullable": true,
                "description": "Buyer's PAN number"
              },
              "dob": {
                "type": "string",
                "format": "date",
                "nullable": true,
                "description": "Buyer's date of birth"
              }
            }
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "invoice": {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Invoice number"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Invoice date in YYYY-MM-DD format"
              },
              "file": {
                "type": "string",
                "nullable": true,
                "description": "Invoice file URL"
              }
            }
          },
          "air_waybills": {
            "type": "array",
            "description": "Array of air waybill information",
            "items": {
              "type": "object",
              "properties": {
                "number": {
                  "type": "string",
                  "description": "Air waybill number"
                },
                "file": {
                  "type": "string",
                  "description": "Air waybill file URL"
                }
              }
            }
          },
          "payment_requests": {
            "type": "array",
            "description": "Array of payment request information",
            "items": {
              "type": "object",
              "properties": {
                "payment_id": {
                  "type": "string",
                  "description": "Payment request ID"
                },
                "status": {
                  "type": "string",
                  "description": "Payment status"
                },
                "payment_link": {
                  "type": "string",
                  "nullable": true,
                  "description": "Payment link (if applicable)"
                },
                "expires_at": {
                  "type": "string",
                  "format": "date-time",
                  "nullable": true,
                  "description": "Payment link expiry time"
                },
                "mop_type": {
                  "type": "string",
                  "description": "Method of payment type"
                },
                "collection_mode": {
                  "type": "string",
                  "description": "Payment collection mode"
                },
                "status_message": {
                  "type": "string",
                  "description": "Payment status message"
                }
              }
            }
          },
          "status": {
            "type": "string",
            "description": "Order status",
            "enum": ["payment_pending", "payment_processing", "payment_successful", "payment_failed", "cancelled"]
          },
          "status_message": {
            "type": "string",
            "nullable": true,
            "description": "Order status message"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Order creation timestamp"
          },
          "is_testing": {
            "type": "boolean",
            "description": "Whether this is a test order"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["success", "message"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "error": {
            "$ref": "#/components/schemas/ErrorDetails"
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "required": ["code", "message"],
        "properties": {
          "code": {
            "type": "string",
            "description": "Error code (e.g., ERR_ORDER_002)"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "object",
            "description": "Detailed error information",
            "properties": {
              "field": {
                "type": "string",
                "description": "Field that caused the error"
              },
              "reason": {
                "type": "string",
                "description": "Reason for the error"
              }
            }
          }
        }
      },
      "GetOrderResponse": {
        "type": "object",
        "required": ["success", "message", "data"],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "$ref": "#/components/schemas/OrderDetails"
          }
        }
      },
      "UpdateOrderRequest": {
        "type": "object",
        "description": "Request body for updating order - only include fields to update",
        "properties": {
          "buyer": {
            "type": "object",
            "description": "Buyer information to update",
            "properties": {
              "pan_number": {
                "type": "string",
                "description": "Buyer's PAN number"
              },
              "dob": {
                "type": "string",
                "format": "date",
                "description": "Buyer's date of birth (YYYY-MM-DD)"
              }
            }
          },
          "invoice": {
            "type": "object",
            "description": "Invoice information to update",
            "properties": {
              "number": {
                "type": "string",
                "description": "Invoice number"
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "Invoice date (YYYY-MM-DD)"
              }
            }
          }
        }
      },
      "UpdateOrderResponse": {
        "type": "object",
        "required": [
          "success",
          "message",
          "data"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "description": "Nested response data",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "Indicates if the order update was successful"
              },
              "message": {
                "type": "string",
                "description": "Success message for the order update"
              },
              "data": {
                "type": "object",
                "description": "Contains the updated order fields",
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "The ID of the updated order"
                  },
                  "buyer": {
                    "type": "object",
                    "description": "Updated buyer information",
                    "properties": {
                      "pan_number": {
                        "type": "string",
                        "description": "Updated PAN number"
                      },
                      "dob": {
                        "type": "string",
                        "format": "date",
                        "description": "Updated date of birth"
                      }
                    }
                  },
                  "invoice": {
                    "type": "object",
                    "description": "Updated invoice information",
                    "properties": {
                      "number": {
                        "type": "string",
                        "description": "Updated invoice number"
                      },
                      "date": {
                        "type": "string",
                        "format": "date",
                        "description": "Updated invoice date"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "UploadDocumentRequest": {
        "type": "object",
        "required": [
          "identifier",
          "document_type",
          "file"
        ],
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique identifier for the document, like an invoice number."
          },
          "document_type": {
            "type": "string",
            "description": "The type of document being uploaded.",
            "enum": [
              "invoice",
              "air_waybill",
              "other"
            ]
          },
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The document file to be uploaded."
          }
        }
      },
      "UploadDocumentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the upload was successful."
          },
          "message": {
            "type": "string",
            "description": "A message detailing the result of the upload."
          },
          "data": {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string",
                "description": "The order ID associated with the document."
              },
              "document_id": {
                "type": "string",
                "description": "A unique ID for the uploaded document."
              },
              "document_type": {
                "type": "string",
                "description": "The type of document that was uploaded."
              },
              "file_url": {
                "type": "string",
                "format": "uri",
                "description": "The URL where the uploaded file can be accessed."
              }
            }
          }
        }
      },
      "ListPaymentsResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "count": {
                "type": "integer",
                "description": "Total number of payments matching the query."
              },
              "page": {
                "type": "integer",
                "description": "The current page number."
              },
              "page_size": {
                "type": "integer",
                "description": "The number of items per page."
              },
              "next": {
                "type": "string",
                "format": "uri",
                "nullable": true,
                "description": "URL for the next page of results."
              },
              "previous": {
                "type": "string",
                "format": "uri",
                "nullable": true,
                "description": "URL for the previous page of results."
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the payment request."
          },
          "merchant": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ref_id": {
            "type": "string",
            "description": "Your reference ID for the order."
          },
          "buyer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string",
                "format": "email"
              },
              "phone": {
                "type": "string"
              }
            }
          },
          "payment_id": {
            "type": "string",
            "description": "The order ID associated with the payment."
          },
          "amount": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string"
              },
              "total_amount": {
                "type": "string"
              },
              "currency": {
                "type": "string"
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "payment_status": {
            "type": "string"
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "preferred_mop_type": {
            "type": "string"
          },
          "payment_settlement_status": {
            "type": "string"
          }
        }
      },
      "GetPaymentResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentDetails"
          }
        }
      },
      "PaymentDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "order_details": {
            "$ref": "#/components/schemas/PaymentOrderDetails"
          },
          "settlement_details": {
            "type": "object",
            "nullable": true
          },
          "refund_details": {
            "type": "array",
            "items": {}
          },
          "payment_gateway": {
            "type": "string"
          },
          "collection_mode": {
            "type": "string"
          },
          "txn_type": {
            "type": "string"
          },
          "mop_type": {
            "type": "string"
          },
          "return_url": {
            "type": "string",
            "format": "uri"
          },
          "expires_day": {
            "type": "integer",
            "nullable": true
          },
          "expires_hour": {
            "type": "integer",
            "nullable": true
          },
          "is_expired": {
            "type": "boolean"
          },
          "transaction_id": {
            "type": "string"
          },
          "bank_ref_num": {
            "type": "string"
          },
          "auth_code": {
            "type": "string",
            "nullable": true
          },
          "card_mask": {
            "type": "string",
            "nullable": true
          },
          "rrn": {
            "type": "string",
            "nullable": true
          },
          "card_holder_name": {
            "type": "string",
            "nullable": true
          },
          "card_issuer_country": {
            "type": "string",
            "nullable": true
          },
          "card_issuer_bank": {
            "type": "string",
            "nullable": true
          },
          "acq_id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "payment_link": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "status_message": {
            "type": "string",
            "nullable": true
          },
          "is_status_final": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "fees": {
            "type": "number",
            "format": "float"
          },
          "taxes_on_fees": {
            "type": "number",
            "format": "float"
          },
          "created_date": {
            "type": "string",
            "format": "date-time"
          },
          "bank_account": {
            "type": "string"
          }
        }
      },
      "PaymentOrderDetails": {
        "type": "object",
        "properties": {
          "order_id": {
            "type": "string"
          },
          "reference_id": {
            "type": "string"
          },
          "amount": {
            "type": "number",
            "format": "float"
          },
          "currency": {
            "type": "string"
          },
          "return_url": {
            "type": "string",
            "format": "uri"
          },
          "mop_type": {
            "type": "string"
          },
          "buyer": {
            "$ref": "#/components/schemas/PaymentBuyer"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          },
          "invoice": {
            "$ref": "#/components/schemas/Invoice"
          },
          "air_waybills": {
            "type": "array",
            "items": {}
          },
          "payment_requests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentRequest"
            }
          },
          "status": {
            "type": "string"
          },
          "status_message": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_testing": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "PaymentBuyer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Buyer"
          },
          {
            "type": "object",
            "properties": {
              "pan_number": {
                "type": "string"
              },
              "date_of_birth": {
                "type": "string",
                "format": "date"
              }
            }
          }
        ]
      },
      "PaymentRequest": {
        "type": "object",
        "properties": {
          "payment_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "payment_link": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "mop_type": {
            "type": "string"
          },
          "collection_mode": {
            "type": "string"
          },
          "status_message": {
            "type": "string",
            "nullable": true
          }
        }
      }
    },
    "securitySchemes": {
      "clientAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Client-Id",
        "description": "Your API client ID"
      },
      "clientSecretAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Client-Secret",
        "description": "Your API client secret"
      },
      "merchantAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Merchant-ID",
        "description": "ID of the sub merchant"
      }
    }
  }
}